direct_created <- paste(path_to_sensors,sprintf("%04d",i),sprintf("%02d", j), sep="/")
dir.create(direct_created)
#saving to disk
#30 min step
step <- "30"
#deleting columns "month" and "year", "hour", "date", but we will do it on a copy
output_30_copy <- output_30
output_30_copy[c("year","month","hour","date")] <- NULL
#output_30[c("year","month")] <- NULL
file_name <- paste(device_name, step , sprintf("%04d",i),sprintf("%02d", j),location_name_rounded, sep="_")
write.table(output_30_copy,paste(paste(direct_created, file_name, sep="/"),".csv", sep=""), sep=",",
append = FALSE, quote = TRUE,
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = TRUE, qmethod = c("escape", "double"))
#hourly  step
step <- "HOUR"
file_name <- paste(device_name, step , sprintf("%04d",i),sprintf("%02d", j),location_name_rounded, sep="_")
write.table(output_hourly,paste(paste(direct_created, file_name, sep="/"),".csv", sep=""), sep=",",
append = FALSE, quote = TRUE,
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = TRUE, qmethod = c("escape", "double"))
#daily step
step <- "DAY"
file_name <- paste(device_name, step , sprintf("%04d",i),sprintf("%02d", j),location_name_rounded, sep="_")
write.table(output_daily,paste(paste(direct_created, file_name, sep="/"),".csv", sep=""), sep=",",
append = FALSE, quote = TRUE,
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = TRUE, qmethod = c("escape", "double"))
#monthly step
step <- "MONTH"
file_name <- paste(device_name, step , sprintf("%04d",i),sprintf("%02d", j),location_name_rounded, sep="_")
write.table(output_monthly,paste(paste(direct_created, file_name, sep="/"),".csv", sep=""), sep=",",
append = FALSE, quote = TRUE,
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = TRUE, qmethod = c("escape", "double"))
}
}
}
}
#str(one_station)
library("reshape")
library("dplyr")
all_soil_sampling <- read.table("D:/shiny_server/data/soil_sampling/soil_sampling_2007.csv", sep=";", header=TRUE)
all_soil_sampling$date <- sort(rep(seq.Date(from=as.Date("2007-03-01"), to=as.Date("2007-07-25"),by="day"),12))
all_soil_sampling$time.. <- as.POSIXct(paste(all_soil_sampling$date," 12:00:00", sep=""))
soil_sampling_par <- read.table("D:/shiny_server/data/soil_sampling/soil_sampling_parameters.csv", sep=";", header=TRUE)
locations_soil <- read.table("D:/shiny_server/data/metadata/coordinates_soil/coord_soil_sampling.csv", sep=";", header=TRUE)
#names(soil_sampling_par)[names(soil_sampling_par)=="instrument_procedure"] <- "procedure_part"
#saving_directory <- "D:/shiny_server/data/soil_sampling/location"
#saving_directory <- "D:/shiny_server/location_complex/measurements"
saving_directory <- "D:/shiny_server/data/meteo_real2"
param_sampling <- soil_sampling_par[which(soil_sampling_par$instrument_procedure=="sampling"),]
param_phys <- soil_sampling_par[which(soil_sampling_par$instrument_procedure=="physical properties of the soil"),]
param_chem <- soil_sampling_par[which(soil_sampling_par$instrument_procedure=="chemical properties of the soil"),]
#let's compute  levels 1, 2 and 3 of the hierarchy, that's folder names
locations_soil$std_name <- NULL
#long5 <- as.integer(substr(location_name, 1, 8))/100000 #called it long5 because it is the lowest level of the hierarchy. Not sure yet if we will have a level 4 or not
locations_soil$long1 <- locations_soil$X - locations_soil$X%%4
locations_soil$long2 <- (locations_soil$X - locations_soil$X%%0.05)*100
locations_soil$long3 <- (locations_soil$X - locations_soil$X%%0.0005)*10000
#lat5 <- as.integer(substr(location_name, 10, 17))/100000
locations_soil$lat1 <- (locations_soil$Y+2 - (locations_soil$Y+2)%%4)-2 #+2 and then -2 to get in the proper square because we start from -90Â° instead of 0
locations_soil$lat2 <- (locations_soil$Y - locations_soil$Y%%0.05)*100
locations_soil$lat3 <- (locations_soil$Y - locations_soil$Y%%0.0005)*10000
locations_soil$level1 <- paste(sprintf("%03d", as.integer(locations_soil$long1)), "E", sprintf("%03d", as.integer(locations_soil$lat1)), "N", sep="")
locations_soil$level2 <- paste(sprintf("%05d", as.integer(locations_soil$long2)), "E", sprintf("%05d", as.integer(locations_soil$lat2)), "N", sep="")
locations_soil$std_name <- paste(sprintf("%07d", as.integer(locations_soil$long3)), "E", sprintf("%07d", as.integer(locations_soil$lat3)), "N", sep="")
locations_soil[names(locations_soil) %in% c("long1","long2","long3","lat1","lat2","lat3")] <- NULL
#let's loop through the different locations, get all data from that location, split into the different devices, and create the metadata for that location
unique(all_soil_sampling$Oznaka_profila..)
unique(all_soil_sampling$Horizont..)
#Initialization of the counter used to generate procedure names
id_proc <- 0
for(i in locations_soil$common_name){
soil_data_loc_i <- all_soil_sampling[which(all_soil_sampling$Kraj_odvzema_vzorca..==i),]
for(j in unique(soil_data_loc_i$Oznaka_profila..)){
id_proc=id_proc+1
soil_data_loc_i_prof_j <- soil_data_loc_i[which(soil_data_loc_i$Oznaka_profila..==j),]
#calculating year and month for folder names later on
year <- unique(format(soil_data_loc_i_prof_j$date, format="%Y"))
month <- unique(format(soil_data_loc_i_prof_j$date, format="%m"))
#str(soil_data_loc_i_prof_j$date)
soil_data_loc_i_prof_j["Globina..cm"] <- NULL
#print(soil_data_loc_i_prof_j)
list_colnames <- colnames(soil_data_loc_i_prof_j)
#let's split the columns into 2, to be able to retrieve only the parameter codes.
#gsub("\\..",",","Globina..cm")
lookup_par_units <- as.data.frame(gsub("\\..",",",list_colnames))
names(lookup_par_units)[1] <- "long_name"
lookup_par_units$long_name <- as.character(lookup_par_units$long_name)
#require(reshape)
lookup_par_units[c("par_code","unit")] <- colsplit(as.character(lookup_par_units$long_name),split=",", names=c("par_code","unit"))
lookup_par_units$long_name <- as.character(gsub(",","\\..",lookup_par_units$long_name))
#The lookup_par_units dataframe will contain original parameter names and units
lookup_par_units$unit <- as.character(lookup_par_units$unit)
lookup_par_units$par_code <- as.character(lookup_par_units$par_code)
#nrow(lookup_par_units)
lookup_par_units$unit[which(lookup_par_units$unit==lookup_par_units$par_code)] <- ""
#Retrieving all parameters in each category
ncol(all_soil_sampling)
list_param_sampling <- lookup_par_units$long_name[which(lookup_par_units$par_code %in% param_sampling$code)]
list_param_phys <- lookup_par_units$long_name[which(lookup_par_units$par_code %in% param_phys$code)]
list_param_chem <- lookup_par_units$long_name[which(lookup_par_units$par_code %in% param_chem$code)]
#Retrieving, for a given profile and location, the subset per sampling, physical and chemical properties
sampling_loc_i_prof_j <- soil_data_loc_i_prof_j[c("Horizont..",list_param_sampling)]
phys_loc_i_prof_j <- soil_data_loc_i_prof_j[c("Horizont..",list_param_phys)]
chem_loc_i_prof_j <- soil_data_loc_i_prof_j[c("Horizont..",list_param_chem)]
#Creating the files for sampling
index <- 0 #(this will be the counter for horizons e.g. 1 to 4 from 0l to M40)
#sampling_loc_i_prof_j$binding_row <- 1
new_sampling_loc_i_prof_j <- NULL
new_phys_loc_i_prof_j <- NULL
new_chem_loc_i_prof_j <- NULL
for(hor in sampling_loc_i_prof_j$Horizont..){#looping through a profile and transforming the 4 rows into 1 row, and adding counter to variables
index <- index+1
#sampling
sampling_ij_hor <- sampling_loc_i_prof_j[which(sampling_loc_i_prof_j$Horizont..==hor),]
sampling_ij_hor$Horizont.. <- NULL
col_names <- colnames(sampling_ij_hor)
new_col_names <- paste(lookup_par_units$par_code[which(lookup_par_units$long_name%in%col_names)],".",index,".",sep="")
names(sampling_ij_hor) <- new_col_names
rownames(sampling_ij_hor) <- "1"
if(index==1) new_sampling_loc_i_prof_j <- sampling_ij_hor
else new_sampling_loc_i_prof_j <- bind_cols(new_sampling_loc_i_prof_j, sampling_ij_hor)
#the following commented was a mistake, because we don't have to create "time" again since we created it at beginning.
# new_sampling_loc_i_prof_j$time.. <-NA
# new_sampling_loc_i_prof_j$time.. <- as.POSIXct(unique(soil_data_loc_i_prof_j$date), format="%Y-%m-%d %H:%M:%S",format="GMT")#adding a time column, only the unique because there are 4 and the same, and we are replacing only one value
#
#phys
phys_ij_hor <- phys_loc_i_prof_j[which(phys_loc_i_prof_j$Horizont..==hor),]
phys_ij_hor$Horizont.. <- NULL
col_names_phys <- colnames(phys_ij_hor)
new_col_names_phys <- paste(lookup_par_units$par_code[which(lookup_par_units$long_name%in%col_names_phys)],".",index,".",sep="")
names(phys_ij_hor) <- new_col_names_phys
rownames(phys_ij_hor) <- "1"
if(index==1) new_phys_loc_i_prof_j <- phys_ij_hor
else new_phys_loc_i_prof_j <- bind_cols(new_phys_loc_i_prof_j, phys_ij_hor)
# new_phys_loc_i_prof_j$time.. <- NA
# new_phys_loc_i_prof_j$time.. <- as.POSIXct(unique(soil_data_loc_i_prof_j$date), format="%Y-%m-%d %H:%M:%S", format="GMT")#adding a time column
#
#chem
chem_ij_hor <- chem_loc_i_prof_j[which(chem_loc_i_prof_j$Horizont..==hor),]
chem_ij_hor$Horizont.. <- NULL
col_names_chem <- colnames(chem_ij_hor)
new_col_names_chem <- paste(lookup_par_units$par_code[which(lookup_par_units$long_name%in%col_names_chem)],".",index,".",sep="")
names(chem_ij_hor) <- new_col_names_chem
rownames(chem_ij_hor) <- "1"
if(index==1) new_chem_loc_i_prof_j <- chem_ij_hor
else new_chem_loc_i_prof_j <- bind_cols(new_chem_loc_i_prof_j, chem_ij_hor)
# new_chem_loc_i_prof_j$time.. <- NA
# new_chem_loc_i_prof_j$time.. <- as.POSIXct(unique(soil_data_loc_i_prof_j$date), format="%Y-%m-%d %H:%M:%S", format="GMT")#adding a time column
#
}
level1 <- locations_soil$level1[which(locations_soil$common_name==i)]
path_level1 <- paste(saving_directory,level1, sep="/")
level2 <- locations_soil$level2[which(locations_soil$common_name==i)]
path_level2 <- paste(path_level1,level2, sep="/")
std_name <- locations_soil$std_name[which(locations_soil$common_name==i)]
path_std_name <- paste(path_level2,std_name, sep="/")
final_path <- paste(path_std_name,"survey", sep="/")
year_path <- paste(final_path,year,sep="/")
month_path <- paste(year_path,month,sep="/")
#sampling
sampling_device_name <- paste(id_proc,"sampling",sep="_")
sampling_file_name <- paste(sampling_device_name,"SURVEY",year,month,std_name,sep="_")
#physical properties
phys_device_name <- paste(id_proc,"phys",sep="_")
phys_file_name <- paste(phys_device_name,"SURVEY",year,month,std_name,sep="_")
#chemical properties
chem_device_name <- paste(id_proc,"chem",sep="_")
chem_file_name <- paste(chem_device_name,"SURVEY",year,month,std_name,sep="_")
if(!dir.exists(path_level1)) dir.create(path_level1)
if(!dir.exists(path_level2)) dir.create(path_level2)
if(!dir.exists(path_std_name)) dir.create(path_std_name)
if(!dir.exists(final_path)) dir.create(final_path)
if(!dir.exists(year_path)) dir.create(year_path)
if(!dir.exists(month_path)) dir.create(month_path)
#since it is difficult to figure out how to write only one "time", we will remove it manually
new_sampling_loc_i_prof_j[c("time.2.","time.3.","time.4.")] <- NULL
names(new_sampling_loc_i_prof_j)[names(new_sampling_loc_i_prof_j)=="time.1."] <- "time"
new_phys_loc_i_prof_j[c("time.2.","time.3.","time.4.")] <- NULL
names(new_phys_loc_i_prof_j)[names(new_phys_loc_i_prof_j)=="time.1."] <- "time"
new_chem_loc_i_prof_j[c("time.2.","time.3.","time.4.")] <- NULL
names(new_chem_loc_i_prof_j)[names(new_chem_loc_i_prof_j)=="time.1."] <- "time"
#writing for sampling
write.table(new_sampling_loc_i_prof_j, paste(paste(month_path,sampling_file_name,sep="/"),".csv", sep=""), sep=",",
append = FALSE, quote = FALSE,
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = TRUE, qmethod = c("escape", "double"))
#writing for physical properties
write.table(new_phys_loc_i_prof_j, paste(paste(month_path,phys_file_name,sep="/"),".csv", sep=""), sep=",",
append = FALSE, quote = FALSE,
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = TRUE, qmethod = c("escape", "double"))
#writing for chemical properties
write.table(new_chem_loc_i_prof_j, paste(paste(month_path,chem_file_name,sep="/"),".csv", sep=""), sep=",",
append = FALSE, quote = FALSE,
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = TRUE, qmethod = c("escape", "double"))
#Metadata generation
#Creating the metadata to put close to survey (folder of the location), with all the procedures.txt metadata
#first, we need to join lookup_par_units to all parameters to be able to retrieve the slovenian name
#the next 3 lines could merge lookup lookup_par_units with soil_sampling_par, to have more information about each parameter
#lookup_par_units_copy <- lookup_par_units
#names(lookup_par_units_copy)[names(lookup_par_units_copy)=="par_code"] <- "code"
#lookup_par_units_compl <- merge(lookup_par_units_copy,soil_sampling_par,by="code")
#Sampling
################################################################################################
procedure_meta_sampling_i_j <- as.data.frame(colnames(new_sampling_loc_i_prof_j))
names(procedure_meta_sampling_i_j) <- "parameter"
procedure_meta_sampling_i_j$slovenian.aggregation <- NA
procedure_meta_sampling_i_j$english.aggregation <- NA
procedure_meta_sampling_i_j$parameter_copy <- procedure_meta_sampling_i_j$parameter
procedure_meta_sampling_i_j$parameter_copy <- gsub("\\.",",",procedure_meta_sampling_i_j$parameter_copy)
procedure_meta_sampling_i_j$code <- colsplit(procedure_meta_sampling_i_j$parameter_copy,split=",",names=c("code","description"))$code
procedure_meta_sampling_i_j$description <- colsplit(procedure_meta_sampling_i_j$parameter_copy,split=",",names=c("code","description"))$description
procedure_meta_sampling_i_j$english.description <- NA
procedure_meta_sampling_i_j$english.description[which(procedure_meta_sampling_i_j$description==1)] <- "ol"
procedure_meta_sampling_i_j$english.description[which(procedure_meta_sampling_i_j$description==2)] <- "Of/h"
procedure_meta_sampling_i_j$english.description[which(procedure_meta_sampling_i_j$description==3)] <- "M10"
procedure_meta_sampling_i_j$english.description[which(procedure_meta_sampling_i_j$description==4)] <- "M40"
procedure_meta_sampling_i_j$slovenian.description <- procedure_meta_sampling_i_j$english.description
procedure_meta_sampling_i_j$unit <- NA
procedure_meta_sampling_i_j$unit[which(procedure_meta_sampling_i_j$code %in% lookup_par_units$par_code)] <- lookup_par_units$unit[which(lookup_par_units$par_code %in% procedure_meta_sampling_i_j$code)]
procedure_meta_sampling_i_j[c("parameter_copy","code","description")] <- NULL
######################################################################
##Physical properties soil, meta
##########################################################################
procedure_meta_phys_i_j <- as.data.frame(colnames(new_phys_loc_i_prof_j))
names(procedure_meta_phys_i_j) <- "parameter"
procedure_meta_phys_i_j$slovenian.aggregation <- NA
procedure_meta_phys_i_j$english.aggregation <- NA
procedure_meta_phys_i_j$parameter_copy <- procedure_meta_phys_i_j$parameter
procedure_meta_phys_i_j$parameter_copy <- gsub("\\.",",",procedure_meta_phys_i_j$parameter_copy)
procedure_meta_phys_i_j$code <- colsplit(procedure_meta_phys_i_j$parameter_copy,split=",",names=c("code","description"))$code
procedure_meta_phys_i_j$description <- colsplit(procedure_meta_phys_i_j$parameter_copy,split=",",names=c("code","description"))$description
procedure_meta_phys_i_j$english.description <- NA
procedure_meta_phys_i_j$english.description[which(procedure_meta_phys_i_j$description==1)] <- "ol"
procedure_meta_phys_i_j$english.description[which(procedure_meta_phys_i_j$description==2)] <- "Of/h"
procedure_meta_phys_i_j$english.description[which(procedure_meta_phys_i_j$description==3)] <- "M10"
procedure_meta_phys_i_j$english.description[which(procedure_meta_phys_i_j$description==4)] <- "M40"
procedure_meta_phys_i_j$slovenian.description <- procedure_meta_phys_i_j$english.description
procedure_meta_phys_i_j$unit <- NA
procedure_meta_phys_i_j$unit[which(procedure_meta_phys_i_j$code %in% lookup_par_units$par_code)] <- lookup_par_units$unit[which(lookup_par_units$par_code %in% procedure_meta_phys_i_j$code)]
procedure_meta_phys_i_j[c("parameter_copy","code","description")] <- NULL
###################################################################################
##Chemical properties soil, meta
#####################################################################################
procedure_meta_chem_i_j <- as.data.frame(colnames(new_chem_loc_i_prof_j))
names(procedure_meta_chem_i_j) <- "parameter"
procedure_meta_chem_i_j$slovenian.aggregation <- NA
procedure_meta_chem_i_j$english.aggregation <- NA
procedure_meta_chem_i_j$parameter_copy <- procedure_meta_chem_i_j$parameter
procedure_meta_chem_i_j$parameter_copy <- gsub("\\.",",",procedure_meta_chem_i_j$parameter_copy)
procedure_meta_chem_i_j$code <- colsplit(procedure_meta_chem_i_j$parameter_copy,split=",",names=c("code","description"))$code
procedure_meta_chem_i_j$description <- colsplit(procedure_meta_chem_i_j$parameter_copy,split=",",names=c("code","description"))$description
procedure_meta_chem_i_j$english.description <- NA
procedure_meta_chem_i_j$english.description[which(procedure_meta_chem_i_j$description==1)] <- "ol"
procedure_meta_chem_i_j$english.description[which(procedure_meta_chem_i_j$description==2)] <- "Of/h"
procedure_meta_chem_i_j$english.description[which(procedure_meta_chem_i_j$description==3)] <- "M10"
procedure_meta_chem_i_j$english.description[which(procedure_meta_chem_i_j$description==4)] <- "M40"
procedure_meta_chem_i_j$slovenian.description <- procedure_meta_chem_i_j$english.description
procedure_meta_chem_i_j$unit <- NA
procedure_meta_chem_i_j$unit[which(procedure_meta_chem_i_j$code %in% lookup_par_units$par_code)] <- lookup_par_units$unit[which(lookup_par_units$par_code %in% procedure_meta_chem_i_j$code)]
procedure_meta_chem_i_j[c("parameter_copy","code","description")] <- NULL
#Let's correct the parameter "time", to "TIME.." and add unit "s"
procedure_meta_sampling_i_j$parameter <- as.character(procedure_meta_sampling_i_j$parameter)
procedure_meta_sampling_i_j[which(procedure_meta_sampling_i_j$parameter=="time"),"unit"] <- "s"
procedure_meta_sampling_i_j[which(procedure_meta_sampling_i_j$parameter=="time"),"parameter"] <- "TIME.."
procedure_meta_phys_i_j$parameter <- as.character(procedure_meta_phys_i_j$parameter)
procedure_meta_phys_i_j[which(procedure_meta_phys_i_j$parameter=="time"),"unit"] <- "s"
procedure_meta_phys_i_j[which(procedure_meta_phys_i_j$parameter=="time"),"parameter"] <- "TIME.."
procedure_meta_chem_i_j$parameter <- as.character(procedure_meta_chem_i_j$parameter)
procedure_meta_chem_i_j[which(procedure_meta_chem_i_j$parameter=="time"),"unit"] <- "s"
procedure_meta_chem_i_j[which(procedure_meta_chem_i_j$parameter=="time"),"parameter"] <- "TIME.."
#######################################################################################
#writing the metadata files each time
#writing for sampling
write.table(procedure_meta_sampling_i_j, paste(paste(path_std_name,sampling_device_name,sep="/"),".txt", sep=""), sep=",",
append = FALSE, quote = FALSE,
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = TRUE, qmethod = c("escape", "double"))
#writing for physical properties
write.table(procedure_meta_phys_i_j, paste(paste(path_std_name,phys_device_name,sep="/"),".txt", sep=""), sep=",",
append = FALSE, quote = FALSE,
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = TRUE, qmethod = c("escape", "double"))
#writing for chemical properties
write.table(procedure_meta_chem_i_j, paste(paste(path_std_name,chem_device_name,sep="/"),".txt", sep=""), sep=",",
append = FALSE, quote = FALSE,
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = TRUE, qmethod = c("escape", "double"))
}
}
locations_soil_std <- locations_soil[,c("level1","level2","std_name","common_name")]
names(locations_soil_std)[names(locations_soil_std)=="std_name"] <- "location_names"
for(loc in unique(locations_soil_std$level1)){
path_to_metadata <- paste(saving_directory,loc,"metadata.csv",sep="/")
if(file.exists(path_to_metadata)){
metadata_loc <- read.table(path_to_metadata, header=T,sep=",")
new_metadata <- locations_soil_std[which(locations_soil_std$level1==loc),]
metadata_merge <- rbind(metadata_loc,new_metadata)
write.table(metadata_merge, path_to_metadata, sep=",",
append = FALSE, quote = FALSE,
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = TRUE, qmethod = c("escape", "double"))
}
else{
new_metadata <- locations_soil_std[which(locations_soil_std$level1==loc),]
write.table(new_metadata, path_to_metadata, sep=",",
append = FALSE, quote = FALSE,
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = TRUE, qmethod = c("escape", "double"))
}
#saving_directory
}
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
list_files_path_filt
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
library("reshape")
library("dplyr")
all_soil_sampling <- read.table("D:/shiny_server/data/soil_sampling/soil_sampling_2007.csv", sep=";", header=TRUE)
all_soil_sampling$date <- sort(rep(seq.Date(from=as.Date("2007-03-01"), to=as.Date("2007-07-25"),by="day"),12))
all_soil_sampling$time.. <- as.POSIXct(paste(all_soil_sampling$date," 12:00:00", sep=""))
soil_sampling_par <- read.table("D:/shiny_server/data/soil_sampling/soil_sampling_parameters.csv", sep=";", header=TRUE)
locations_soil <- read.table("D:/shiny_server/data/metadata/coordinates_soil/coord_soil_sampling.csv", sep=";", header=TRUE)
#names(soil_sampling_par)[names(soil_sampling_par)=="instrument_procedure
View(all_soil_sampling)
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/personal/shiny_app/leaflet_location_complex_v2)
)
""
"
shiny::runApp("D:/personal/shiny_app/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
shiny::runApp("D:/shiny_server/test_apps/leaflet_location_complex_v2")
